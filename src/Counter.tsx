import React, { useEffect, useRef } from "react";
import { useCounterStore } from "./state";

/**
 * Use the "hook" generated by the `create` function outside of a component
 */
const logCount = () => {
  const count = useCounterStore.getState().count;
  console.log(count);
};

const setCount = () => {
  useCounterStore.setState({ count: 50 });
};

/**
 * We are having two components here in order to illustrate how
 * to use the Zustand state management via the hook, generated by
 * its `create` function.
 */
const Count: React.FC = () => {
  const count = useCounterStore((state) => state.count);

  useEffect(() => {
    logCount();
  });

  return (
    <h2>
      Count is <b>{count}</b>
    </h2>
  );
};

/**
 * This is the actual component that will be rendered in our react app
 */
const Counter: React.FC = () => {
  const inputRef = useRef<HTMLInputElement>(null);

  /**
   * Do not use object destructuring like:
   * > const { increment, decrement, incrementByAmount } = useCounterStore((state) => state);
   *
   * Because with Zustand:
   * - this is less performant than to be specific like below (acces the value directly),
   * - this will cause rerendering on every state change, despite we are using all
   *   variables from the state or certain one in our component.
   */
  const increment = useCounterStore((state) => state.increment);
  const decrement = useCounterStore((state) => state.decrement);
  const incrementByAmount = useCounterStore((state) => state.incrementByAmount);
  const incByAmountAsync = useCounterStore((state) => state.incByAmountAsync);

  return (
    <div className="counter-container">
      <Count />

      <div className="button-container">
        <div className="button-row">
          <button onClick={() => increment()}>Increment</button>
          <button onClick={() => decrement()}>Decrement</button>
        </div>
        <div className="button-row">
          <input id="amount" type="number" ref={inputRef} defaultValue={10} />
        </div>
        <div className="button-row">
          <button
            onClick={() =>
              incrementByAmount(inputRef.current?.valueAsNumber || 0)
            }
          >
            Increment by amount
          </button>
          <button
            onClick={() =>
              incByAmountAsync(inputRef.current?.valueAsNumber || 0)
            }
          >
            Increment by amount Async
          </button>
        </div>
        <div className="button-row">
          <button onClick={setCount}>
            Set count to 50, via regular func outside of component
          </button>
        </div>
      </div>
    </div>
  );
};

export default Counter;
